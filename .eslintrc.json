{
    "env": {
        "node": true,
        "es2021": true
    },
    "extends": [
        "eslint:recommended",
        "plugin:prettier/recommended",
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "prettier"
    ],
    "parserOptions": {
        "ecmaVersion": 2021,
        "sourceType": "module"
    },
    "plugins": ["@typescript-eslint", "import"],
    "parser": "@typescript-eslint/parser",
    "rules": {
        // Одинарные ковычки для строковых переменных
        "quotes": [
            "warn",
            "single",
            {
                "allowTemplateLiterals": true
            }
        ],
        "jsx-quotes": ["warn", "prefer-double"],
        "no-debugger": "warn",
        "no-console": "off",
        // Проверка констант
        "prefer-const": "warn",
        // Не разрешаем больше одной пустой строки
        "no-multiple-empty-lines": "warn",
        // Убираем бесполезные пробелы
        "no-trailing-spaces": "warn",
        "max-len": [
            "warn",
            {
                "code": 110
            }
        ],
        // Скобки в стрелочных функциях
        "arrow-parens": ["warn", "always"],
        // Строгие сравнения
        "eqeqeq": ["warn", "always"],
        // Предупреждаем бесполезные вычисления
        "no-unused-expressions": [
            "error",
            {
                "allowShortCircuit": true,
                "allowTernary": true
            }
        ],
        // Запятые в конце
        "comma-dangle": [
            "warn",
            {
                "arrays": "always-multiline",
                "objects": "always-multiline",
                "imports": "always-multiline",
                "exports": "always-multiline",
                "functions": "never"
            }
        ],
        // Сортировка импортов, но вырубаем сортировку строк импортов, этим занимается правило import/order
        "sort-imports": [
            1,
            {
                "ignoreDeclarationSort": true
            }
        ],
        // ; в конце
        "semi": "warn",
        // Пустая строка в конце файла
        "eol-last": "warn",
        // Выключаем высшее зло
        "no-eval": "error",
        // Зацикливание
        "import/no-cycle": "warn",
        // Пустая строка после импортов
        "import/newline-after-import": "warn",
        "import/order": [
            "warn",
            {
                "groups": ["builtin", "external", "internal", "parent", "sibling", "index", "object", "type"],
                "pathGroups": [
                    {
                        "pattern": "express",
                        "group": "external",
                        "position": "before"
                    }
                ],
                "alphabetize": {
                    "order": "asc",
                    "caseInsensitive": true
                }
            }
        ],
        // Разрешаем неиспользуемые _ переменные и rest операторы
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": [
            "warn",
            {
                "argsIgnorePattern": "^_",
                "ignoreRestSiblings": true
            }
        ],
        "@typescript-eslint/no-require-imports": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-inferrable-types": "warn",
        // Исправление конфликта no-shadow
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "warn"
    },
    "overrides": [
        {
            "files": ["*.ts", "*.tsx"],
            "rules": {
                "camelcase": "off",
                "@typescript-eslint/naming-convention": [
                    "error",
                    // Данные по умолчанию
                    {
                        "selector": "default",
                        "format": ["camelCase", "snake_case"]
                    },
                    // Все классы через PascalCase
                    {
                        "selector": "class",
                        "format": ["PascalCase"]
                    },
                    {
                        "selector": "classMethod",
                        "format": ["camelCase"],
                        "leadingUnderscore": "allow"
                    },
                    // Функции через camelCase, исключение функциональные компоненты
                    {
                        "selector": "function",
                        "format": ["camelCase", "PascalCase"]
                    },
                    // Все параметры всех функций через camelCase или PascalCase
                    {
                        "selector": "parameter",
                        "format": ["camelCase", "PascalCase"],
                        "leadingUnderscore": "allow"
                    },
                    // Все пропсы всех объектов, интерфейсов
                    {
                        "selector": "property",
                        "format": ["camelCase", "PascalCase", "snake_case", "UPPER_CASE"],
                        "leadingUnderscore": "allow"
                    },
                    {
                        "selector": "objectLiteralProperty",
                        "format": ["camelCase", "PascalCase", "snake_case", "UPPER_CASE"],
                        "leadingUnderscore": "allow"
                    },
                    // Переменные
                    {
                        "selector": "variable",
                        "format": ["camelCase", "PascalCase", "snake_case", "UPPER_CASE"]
                    },
                    // Все интерфейсы строго с I
                    {
                        "selector": "interface",
                        "format": ["PascalCase"],
                        "custom": {
                            "regex": "^I[A-Z]",
                            "match": true
                        }
                    },
                    // Все типы строго с T
                    {
                        "selector": "typeAlias",
                        "format": ["PascalCase"],
                        "custom": {
                            "regex": "^T[A-Z]",
                            "match": true
                        }
                    },
                    // Все типы строго с T для дженериков и прочего
                    {
                        "selector": "typeParameter",
                        "format": ["PascalCase"],
                        "prefix": ["T"]
                    },
                    // Все Enum строго с E
                    {
                        "selector": "enum",
                        "format": ["PascalCase"],
                        "custom": {
                            "regex": "^E[A-Z]",
                            "match": true
                        }
                    },
                    // Все элементы Enum прописывать через UPPER_CASE
                    {
                        "selector": "enumMember",
                        "format": ["UPPER_CASE"]
                    }
                ]
            }
        }
    ]
}
